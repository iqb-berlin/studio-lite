#############################################################################
## 'MAIN' TARGETED PULL REQUESTS, RELEASE TAGS
#############################################################################

.main_pr_base_rules:
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "main"
    - if: $CI_COMMIT_TAG
      when: never

.main_pr_manual_rules:
  rules:
    - if: $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME == "main"
      when: manual
    - if: $CI_COMMIT_TAG
      when: never

.main_commit_rules:
  rules:
    - if: $CI_COMMIT_BRANCH && ($CI_COMMIT_BRANCH == "main") && ($CI_PIPELINE_SOURCE != "external_pull_request_event")
    - if: $CI_COMMIT_TAG
      when: never

.release_rules:
  rules:
    - if: $CI_COMMIT_TAG =~ /^(?P<MAJOR>0|[1-9]\d*)\.(?P<MINOR>0|[1-9]\d*)\.(?P<PATCH>0|[1-9]\d*)$/

check-main-pr-rules:
  stage: .pre
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  script:
    - echo $CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME
    - echo $CI_COMMIT_TAG
    - if [ "$CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME" != "main" ];
      then echo "pull request target branch is not 'main'";
      else echo "pull request target branch '$CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME' == 'main'"; fi
    - if [ "$CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME" == "main" ];
      then echo "pull request target branch is 'main'";
      else echo "pull request target branch '$CI_EXTERNAL_PULL_REQUEST_TARGET_BRANCH_NAME' != 'main'"; fi
    - if [ -n "$CI_COMMIT_TAG" ];
      then echo "commit tag string length is nonzero";
      else echo "commit tag = '$CI_COMMIT_TAG'"; fi
    - if [ -z "$CI_COMMIT_TAG" ];
      then echo "commit tag string length is zero";
      else echo "commit tag = '$CI_COMMIT_TAG'"; fi

check-main-commit-rules:
  stage: .pre
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_commit_rules, rules ]
  script:
    - echo $CI_COMMIT_BRANCH
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_TAG
    - if [ -n "$CI_COMMIT_BRANCH" ];
      then echo "commit branch string length is nonzero";
      else echo "commit branch = '$CI_COMMIT_BRANCH'"; fi
    - if [ -z "$CI_COMMIT_BRANCH" ];
      then echo "commit branch string length is zero";
      else echo "commit branch = '$CI_COMMIT_BRANCH'"; fi
    - if [ "$CI_COMMIT_BRANCH" = "main" ];
      then echo "commit branch is 'main'";
      else echo "'$CI_COMMIT_BRANCH' != 'main'"; fi
    - if [ "$CI_COMMIT_BRANCH" != "main" ];
      then echo "commit branch is not 'main'";
      else echo "'$CI_COMMIT_BRANCH' == 'main'"; fi
    - if [ "$CI_PIPELINE_SOURCE" = "external_pull_request_event" ];
      then echo "pipeline source is 'external_pull_request_event'";
      else echo "'$CI_PIPELINE_SOURCE' != 'external_pull_request_event'"; fi
    - if [ "$CI_PIPELINE_SOURCE" != "external_pull_request_event" ];
      then echo "pipeline source is not 'external_pull_request_event'";
      else echo "'$CI_PIPELINE_SOURCE' == 'external_pull_request_event'"; fi
    - if [ -n "$CI_COMMIT_BRANCH" ] && [ "$CI_COMMIT_BRANCH" = "main" ] && [ "$CI_PIPELINE_SOURCE" = "external_pull_request_event" ];
      then echo "commit branch exists, is 'main', and it's an external_pull_request_event";
      else echo "commit branch = '$CI_COMMIT_BRANCH', pipeline source = '$CI_PIPELINE_SOURCE'"; fi
    - if [ -z "$CI_COMMIT_BRANCH" ] || [ "$CI_COMMIT_BRANCH" != "main" ] || [ "$CI_PIPELINE_SOURCE" != "external_pull_request_event" ];
      then echo "commit branch doesn't exist or isn't 'main' or it isn't an external_pull_request_event";
      else echo "commit branch = '$CI_COMMIT_BRANCH', pipeline source = '$CI_PIPELINE_SOURCE'"; fi
    - if [ -z "$CI_COMMIT_TAG" ];
      then echo "commit tag string length is zero";
      else echo "commit tag = '$CI_COMMIT_TAG'"; fi
    - if [ -n "$CI_COMMIT_TAG" ];
      then echo "commit tag string length is nonzero";
      else echo "commit tag = '$CI_COMMIT_TAG'"; fi

check-release-rules:
  stage: .pre
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .release_rules, rules ]
  before_script:
    - RELEASE_REGEX="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$"
  script:
    - echo $PRERELEASE_REGEX
    - if [[ $CI_COMMIT_TAG =~ $RELEASE_REGEX ]];
      then echo "$CI_COMMIT_TAG is a valid release tag.";
      else echo "$CI_COMMIT_TAG is not a valid release tag!"; fi

build-main-pr-backend-test-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --target=dev
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg PROJECT=api
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${BACKEND_IMAGE_NAME}:latest
          -f apps/api/Dockerfile
          -t ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
        .
    - docker push -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-pr-frontend-test-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --target=dev
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg PROJECT=frontend
          --build-arg apihost=studio-lite-backend
          --build-arg apiport=3333
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${FRONTEND_IMAGE_NAME}:latest
          -f apps/frontend/Dockerfile
          -t ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
        .
    - docker push -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-pr-frontend-e2e-test-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_E2E_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend-e2e"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${FRONTEND_E2E_IMAGE_NAME}:latest
          -f apps/frontend-e2e/Dockerfile
          -t ${FRONTEND_E2E_IMAGE_NAME}:${CI_COMMIT_SHA}
          -t ${FRONTEND_E2E_IMAGE_NAME}:latest .
    - docker push -q -a ${FRONTEND_E2E_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-pr-db-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    DB_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-db"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${DB_IMAGE_NAME}:latest
          -f database/Postgres.Dockerfile
          -t ${DB_IMAGE_NAME}:${CI_COMMIT_SHA}
          -t ${DB_IMAGE_NAME}:main
        .
    - docker push -q -a ${DB_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-pr-liquibase-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    LIQUIBASE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-liquibase"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$REGISTRY_PASSWORD" | docker login -u $REGISTRY_USER --password-stdin $REGISTRY
  script:
    - docker build
          --progress plain
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${LIQUIBASE_IMAGE_NAME}:latest
          -f database/Liquibase.Dockerfile
          -t ${LIQUIBASE_IMAGE_NAME}:${CI_COMMIT_SHA}
          -t ${LIQUIBASE_IMAGE_NAME}:main
        .
    - docker push -q -a ${LIQUIBASE_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $REGISTRY

build-main-pr-backend-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-backend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
  script:
    - docker build
          --progress plain
          --target=prod
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg PROJECT=api
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
          -f apps/api/Dockerfile
          -t ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}
          -t ${BACKEND_IMAGE_NAME}:main
        .
    - docker push -q -a ${BACKEND_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-pr-frontend-image:
  stage: build
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-frontend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
  script:
    - docker build
          --progress plain
          --target=prod
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg PROJECT=frontend
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
          -f apps/frontend/Dockerfile
          -t ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}
          -t ${FRONTEND_IMAGE_NAME}:main
        .
    - docker push -q -a ${FRONTEND_IMAGE_NAME}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

test-main-pr-db:
  stage: test-db
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-db-image
    - build-main-pr-liquibase-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml pull -q db liquibase
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d db
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog status
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog validate
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog updateSQL
  script:
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog updateTestingRollback
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history

test-main-pr-backend:
  stage: test-units
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-backend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
  before_script:
    - docker pull -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  script:
    - docker run ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test test api

test-main-pr-frontend:
  stage: test-units
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-frontend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - docker pull -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  script:
    - docker run ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test test frontend

test-main-pr-e2e:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e test-e2e

test-main-pr-e2e-api:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-api test-e2e-api

test-main-pr-e2e-ui-chrome:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-ui-chrome test-e2e-ui-chrome

test-main-pr-e2e-ui-chrome-mobile:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-ui-chrome-mobile test-e2e-ui-chrome-mobile

test-main-pr-e2e-ui-firefox:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-ui-firefox test-e2e-ui-firefox

test-main-pr-e2e-ui-firefox-mobile:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-ui-firefox-mobile test-e2e-ui-firefox-mobile

test-main-pr-e2e-ui-edge:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-ui-edge test-e2e-ui-edge

test-main-pr-e2e-ui-edge-mobile:
  stage: test-e2e
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_manual_rules, rules ]
  needs:
    - test-main-pr-db
    - build-main-pr-backend-image
    - build-main-pr-frontend-image
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  before_script:
    - sed -i "s/TAG=.*$/TAG=${CI_COMMIT_SHA}/" .env.studio-lite.template
    - sed -i "s^REGISTRY_PATH=.*$^REGISTRY_PATH=${CI_REGISTRY_IMAGE}/^" .env.studio-lite.template
    - export $(grep -v '^#' .env.studio-lite.template | xargs)
    - cp config/frontend/default.conf.http-template config/frontend/default.conf.template
  script:
    - docker network create app-net
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml up -d --quiet-pull
    - docker compose --env-file .env.studio-lite.template -f docker-compose.studio-lite.yaml -f docker-compose.studio-lite.prod.yaml run --rm liquibase
      liquibase --changelogFile=studio-lite.changelog-root.xml --url=jdbc:postgresql://db:5432/${POSTGRES_DB}
      --username=${POSTGRES_USER} --password=${POSTGRES_PASSWORD} --classpath=changelog history
    - docker compose -f docker-compose.e2e.yaml up --quiet-pull --exit-code-from test-e2e-ui-edge-mobile test-e2e-ui-edge-mobile

lint-main-pr-backend:
  stage: lint
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-backend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
  before_script:
    - docker pull -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  script:
    - docker run ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test lint api

lint-main-pr-frontend:
  stage: lint
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-frontend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - docker pull -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  script:
    - docker run ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test lint frontend

lint-main-pr-frontend-e2e:
  stage: lint
  interruptible: true
  allow_failure: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-frontend-e2e-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_E2E_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend-e2e"
  before_script:
    - docker pull -q ${FRONTEND_E2E_IMAGE_NAME}:${CI_COMMIT_SHA}
  script:
    - docker run ${FRONTEND_E2E_IMAGE_NAME}:${CI_COMMIT_SHA} lint frontend-e2e

audit-main-pr-backend:
  stage: audit
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-backend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
  before_script:
    - docker pull -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  script:
    - docker run --entrypoint npm ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test audit --audit-level critical

audit-main-pr-frontend:
  stage: audit
  interruptible: true
  rules:
    - !reference [ .main_pr_base_rules, rules ]
  needs:
    - build-main-pr-frontend-test-image
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - docker pull -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test
  script:
    - docker run --entrypoint npm ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}_test audit --audit-level critical

gemnasium-dependency_scanning:
  stage: scan-dependencies
  interruptible: true
  allow_failure: true
  rules: # TODO: Rules does not work
    - !reference [ .main_pr_base_rules, rules ]

build-main-commit-db-image:
  stage: build-images
  rules:
    - !reference [ .main_commit_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    DB_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-db"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --cache-from ${DB_IMAGE_NAME}:main
          -f database/Postgres.Dockerfile
          -t ${DB_IMAGE_NAME}:${CI_COMMIT_SHA}
        .
    - docker push -q ${DB_IMAGE_NAME}:${CI_COMMIT_SHA}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-commit-liquibase-image:
  stage: build-images
  rules:
    - !reference [ .main_commit_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    LIQUIBASE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-liquibase"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --cache-from ${LIQUIBASE_IMAGE_NAME}:main
          -f database/Liquibase.Dockerfile
          -t ${LIQUIBASE_IMAGE_NAME}:${CI_COMMIT_SHA}
        .
    - docker push -q ${LIQUIBASE_IMAGE_NAME}:${CI_COMMIT_SHA}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $REGISTRY

build-main-commit-backend-image:
  stage: build-images
  rules:
    - !reference [ .main_commit_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --target=prod
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg PROJECT=api
          --cache-from ${BACKEND_IMAGE_NAME}:main
          -f apps/api/Dockerfile
          -t ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}
        .
    - docker push ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

build-main-commit-frontend-image:
  stage: build-images
  rules:
    - !reference [ .main_commit_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - ip a | grep mtu
    - docker network inspect bridge | grep mtu
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build
          --progress plain
          --target=prod
          --build-arg REGISTRY_PATH=${DOCKER_HUB_PROXY}
          --build-arg PROJECT=frontend
          --cache-from ${BACKEND_IMAGE_NAME}:main
          -f apps/frontend/Dockerfile
          -t ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}
        .
    - docker push ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}
  after_script:
    - docker logout $CI_DEPENDENCY_PROXY_SERVER
    - docker logout $CI_REGISTRY

scan-main-commit-db-image:
  stage: scan-images
  allow_failure: true
  rules:
    - !reference [ .main_commit_rules, rules ]
  needs:
    - build-main-commit-db-image
  image:
    name: $TRIVY_IMAGE
    entrypoint: [ "" ]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-db:${CI_COMMIT_SHA}"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - trivy image --clear-cache
    # update vulnerabilities db
    - trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - trivy image --exit-code 0 --timeout 30m --scanners vuln --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - trivy image --exit-code 0 --timeout 30m --scanners vuln "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - trivy image --exit-code 1 --timeout 30m --scanners vuln --ignore-unfixed --severity CRITICAL $FULL_IMAGE_NAME
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

scan-main-commit-liquibase-image:
  stage: scan-images
  allow_failure: true
  rules:
    - !reference [ .main_commit_rules, rules ]
  needs:
    - build-main-commit-liquibase-image
  image:
    name: $TRIVY_IMAGE
    entrypoint: [ "" ]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-liquibase:${CI_COMMIT_SHA}"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - trivy image --clear-cache
    # update vulnerabilities db
    - trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - trivy image --exit-code 0 --timeout 30m --scanners vuln --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - trivy image --exit-code 0 --timeout 30m --scanners vuln "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - trivy image --exit-code 1 --timeout 30m --scanners vuln --ignore-unfixed --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

scan-main-commit-backend-image:
  stage: scan-images
  allow_failure: true
  rules:
    - !reference [ .main_commit_rules, rules ]
  needs:
    - build-main-commit-backend-image
  image:
    name: $TRIVY_IMAGE
    entrypoint: [ "" ]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend:${CI_COMMIT_SHA}"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - trivy image --clear-cache
    # update vulnerabilities db
    - trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - trivy image --exit-code 0 --timeout 30m --scanners vuln --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - trivy image --exit-code 0 --timeout 30m --scanners vuln "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - trivy image --exit-code 1 --timeout 30m --scanners vuln --ignore-unfixed --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

scan-main-commit-frontend-image:
  stage: scan-images
  allow_failure: true
  rules:
    - !reference [ .main_commit_rules, rules ]
  needs:
    - build-main-commit-frontend-image
  image:
    name: $TRIVY_IMAGE
    entrypoint: [ "" ]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend:${CI_COMMIT_SHA}"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - trivy image --clear-cache
    # update vulnerabilities db
    - trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - trivy image --exit-code 0 --timeout 30m --scanners vuln --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - trivy image --exit-code 0 --timeout 30m --scanners vuln "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - trivy image --exit-code 1 --timeout 30m --scanners vuln --ignore-unfixed --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

build-release:
  stage: build-images
  rules:
    - !reference [ .release_rules, rules ]
  image: $DOCKER_IMAGE
  services:
    - name: $DOCKER_SERVICE
      entrypoint: [ "sh", "-c", "dockerd-entrypoint.sh $DOCKER_DAEMON_OPTIONS" ]
      alias: docker
  variables:
    DB_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-db"
    LIQUIBASE_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-liquibase"
    BACKEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-backend"
    FRONTEND_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/iqbberlin/studio-lite-frontend"
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_USER --password-stdin
    - docker pull -q ${DB_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${LIQUIBASE_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker pull -q ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA}
  script:
    - docker tag ${DB_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-db:${CI_COMMIT_TAG}
    - docker tag ${DB_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-db:latest
    - docker tag ${LIQUIBASE_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-liquibase:${CI_COMMIT_TAG}
    - docker tag ${LIQUIBASE_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-liquibase:latest
    - docker tag ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-backend:${CI_COMMIT_TAG}
    - docker tag ${BACKEND_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-backend:latest
    - docker tag ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-frontend:${CI_COMMIT_TAG}
    - docker tag ${FRONTEND_IMAGE_NAME}:${CI_COMMIT_SHA} iqbberlin/studio-lite-frontend:latest
    - docker push -a -q iqbberlin/studio-lite-db
    - docker push -a -q iqbberlin/studio-lite-liquibase
    - docker push -a -q iqbberlin/studio-lite-backend
    - docker push -a -q iqbberlin/studio-lite-frontend
  after_script:
    - docker logout
